from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo
from aiogram import F
from config import API_TOKEN, ADMIN_IDS, WEBAPP_URL, logger
from database import SessionLocal
from models import PhotoSession

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ñ–æ—Ç–æ—Å–µ—Å—ñ—é",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø—É –Ω–∏–∂—á–µ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó.",
        reply_markup=keyboard
    )


@dp.message(Command(commands=['admin']))
async def admin_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–æ—Å—Ç—É–ø.")
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ñ –∑–∞–ø–∏—Å–∏", callback_data="show_all")],
        [types.InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å", callback_data="delete_menu")]
    ])
    await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:", reply_markup=keyboard)


@dp.callback_query(F.data == "show_all")
async def show_all_records(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    try:
        await callback.answer()

        with SessionLocal() as db:
            records = db.query(PhotoSession).order_by(PhotoSession.date.desc()).all()

            if not records:
                await callback.message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è")
                return

            for record in records:
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üóë –í–∏–¥–∞–ª–∏—Ç–∏",
                        callback_data=f"delete_{record.id}"
                    )]
                ])

                text = (
                    f"üìù –ó–∞–ø–∏—Å #{record.id}\n"
                    f"üë§ –Ü–º'—è: {record.name}\n"
                    f"üìß Email: {record.email}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {record.phone}\n"
                    f"üìÖ –î–∞—Ç–∞: {record.date}\n"
                    f"üìù –û–ø–∏—Å: {record.description}"
                )
                await callback.message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in show_all_records: {e}")
        await callback.message.answer("–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.callback_query(F.data == "delete_menu")
async def delete_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    try:
        await callback.answer()

        with SessionLocal() as db:
            records = db.query(PhotoSession).order_by(PhotoSession.date.desc()).all()

            if not records:
                await callback.message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è")
                return

            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"#{record.id} - {record.name} ({record.date})",
                    callback_data=f"delete_{record.id}"
                )] for record in records
            ])

            await callback.message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"Error in delete_menu: {e}")
        await callback.message.answer("–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.callback_query(lambda c: c.data and c.data.startswith('delete_'))
async def delete_record(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    try:
        record_id = int(callback.data.split('_')[1])

        with SessionLocal() as db:
            record = db.query(PhotoSession).filter(PhotoSession.id == record_id).first()

            if not record:
                await callback.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"confirm_delete_{record_id}"),
                    types.InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_delete")
                ]
            ])

            await callback.message.answer(
                f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å #{record_id}?\n"
                f"–Ü–º'—è: {record.name}\n"
                f"–î–∞—Ç–∞: {record.date}",
                reply_markup=keyboard
            )
            await callback.answer()

    except Exception as e:
        logger.error(f"Error in delete_record: {e}")
        await callback.message.answer("–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.callback_query(lambda c: c.data and c.data.startswith('confirm_delete_'))
async def confirm_delete(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    try:
        record_id = int(callback.data.split('_')[2])

        with SessionLocal() as db:
            record = db.query(PhotoSession).filter(PhotoSession.id == record_id).first()

            if not record:
                await callback.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            db.delete(record)
            db.commit()

            await callback.message.answer(f"‚úÖ –ó–∞–ø–∏—Å #{record_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π")
            await callback.answer()

    except Exception as e:
        logger.error(f"Error in confirm_delete: {e}")
        await callback.message.answer("–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")
    await callback.answer()